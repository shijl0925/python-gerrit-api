# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - {python-version: '3.11', os: 'ubuntu-latest'}
          - {python-version: '3.10', os: 'ubuntu-latest'}
          - {python-version: '3.9', os: 'ubuntu-latest'}
          - {python-version: '3.8', os: 'ubuntu-latest'}
          - {python-version: '3.7', os: 'ubuntu-latest'}
          - {python-version: '3.6', os: 'ubuntu-20.04'}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint pytest pytest-cov mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      env:
        GERRIT_HOST_URL: ${{ secrets.GERRIT_HOST_URL }}
        GERRIT_USERNAME: ${{ secrets.GERRIT_USERNAME }}
        GERRIT_PASSWORD: ${{ secrets.GERRIT_PASSWORD }}
      run: |
        pytest -s
        coverage report
    - name: Analysing the code with pylint
      run: |
        pylint --rcfile=pylint.conf gerrit
    # - name: Run mypy check
    #   run: |
    #     mypy gerrit --install-types
    - name: SonarCloud Scan
      if: ${{ matrix.python-version == '3.10' }}
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
